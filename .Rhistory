summarise(n=n(),mean_price = mean(price_trans),cv_price = sd(price_trans)/mean_price,std_price = sd(price_trans))
data_new1
getwd()
setwd(C:\Users\lianjia\Desktop\junjia_model_lianjia)
setwd(C:/Users/lianjia/Desktop/junjia_model_lianjia)
setwd("C:/Users/lianjia/Desktop/junjia_model_lianjia")
getwd()
data0_avg = read.csv('625703.csv')
ziru0 = read.csv('625703.csv')
str(ziru0)
summary(ziru0$decoration)
library(dplyr)
#第一步修改数据类型
numeric_names = grep('per_area',names(ziru0))
numeric_names
#第一步修改数据类型
numeric_names = names(ziru0)[grep('per_area',names(ziru0))]
numeric_names
#numeric_names ：是需要把数据类型变成数值型的变量名字符向量。
a = as.numeric(price_trans_per_area)
#numeric_names ：是需要把数据类型变成数值型的变量名字符向量。
attach(ziru0)
a = as.numeric(price_trans_per_area)
summary(a)
ziru0[,numeric_names] = as.numeric(numeric_names)
str(ziru0)
ziru0 = read.csv('625703.csv')
ziru0[,numeric_names] = apply(ziru0[,numeric_names],2,as.numeric)
str(ziru0)
dim(ziru0)
sum(price_trans_per_area!=price_listing_per_area)
#numeric_names ：是需要把数据类型变成数值型的变量名字符向量。
attach(ziru0)
sum(price_trans_per_area!=price_listing_per_area)
class(price_trans_per_area)
price_trans_per_area!=price_listing_per_area
sum(price_trans_per_area!=price_listing_per_area,na.rm = T)
#17202
is.na(price_trans_per_area)
#17202
sum(is.na(price_trans_per_area))
sum(is.na(price_listing_per_area))
which(is.na(price_trans_per_area))
ziru-[which(is.na(price_trans_per_area)),]
ziru0[which(is.na(price_trans_per_area)),]
ziru0=ziru0[-15030,]
attach(ziru0)
#在原数据框中删除价格为空的值。
max(abs(price_trans_per_area-price_listing_per_area))
#在原数据框中删除价格为空的值。
max(abs(price_trans_per_area-price_listing_per_area)/price_listing_per_area)
#在原数据框中删除价格为空的值。
hist(abs(price_trans_per_area-price_listing_per_area)/price_listing_per_area)
ziru1 = group_by(ziru0, hdic_resblock_id,rent_type)
head(ziru1)
names(ziru0)
ziru2 = ziru0 %>%
group_by(hdic_resblock_id,rent_type) %>%
summarise(n = n(),)
View(ziru2)
table(ziru2$n)
group_size(ziru1)
table(group_size(ziru1))
n_groups(ziru1)
ziru2 = ziru0 %>%
group_by(hdic_resblock_id,rent_type) %>%
summarise(n = n(),mean_price = mean(price_trans_per_area))
table(ziru2$mean_price)
hist(ziru2$mean_price)
View(ziru2)
#将ziru2写出
write.table(ziru2,'ziru2.csv',row.names=F)
#将ziru2写出
write.table(ziru2,'ziru2.csv',sep = ",",row.names=T)
#将ziru2写出
write.table(ziru2,'ziru2.csv',sep = ",",row.names=F)
2745*2
5490-3932
zirulian0 = read.csv('625756.csv')
zirulian0 = read.csv('628756.csv')
str(zirulian0)
summary(zirulian0$decoration)#忽略装修情况
#第一步修改数据类型
numeric_names2 = names(zirulian0)[grep('per_area',names(zirulian0))]
#numeric_names ：是需要把数据类型变成数值型的变量名字符向量。
zirulian0[,numeric_names] = apply(zirulian0[,numeric_names],2,as.numeric)
str(zirulian0)
sum(price_trans_per_area!=price_listing_per_area,na.rm = T)
sum(zirulian0$price_trans_per_area!=zirulian0$price_listing_per_area,na.rm = T)
#17202
sum(is.na(zirulian0$price_trans_per_area)) #1
sum(is.na(zirulian0$price_listing_per_area)) #1
#17202
complete_logical = complete.cases(zirulian0$price_trans_per_area,zirulian0$price_listing_per_area)
sum(complete_logical)
zirulian0 = zirulian0[complete_logical,]
#
zirulian1 = group_by(zirulian0, hdic_resblock_id,rent_type)
n_groups(zirulian1)#3932
table(group_size(zirulian1))
4848*2
3932/5490
8510/9696
9696-8510
zirulian2 = zirulian0 %>%
group_by(hdic_resblock_id,rent_type) %>%
summarise(n = n(),mean_price = mean(price_trans_per_area))
write.table(zirulian2,'zirulian2.csv',sep = ",",row.names=F)
zirulian2 = zirulian0 %>%
group_by(hdic_resblock_id,rent_type) %>%
summarise(n_2 = n(),mean_price_2 = mean(price_trans_per_area))
join_data = right_join(ziru2, zirulian2)
join_data
View(join_data)
attach(join_data)
detach(join_data)
join_data2 = inner_join(ziru2, zirulian2)
View(join_data2)
mutate(join_data2,diff_rate = abs(mean_price_2-mean_price)/mean_price)
mutate(join_data2,diff_rate = abs(mean_price_2-mean_price)/mean_price)
join_data2 = mutate(join_data2,diff_rate = abs(mean_price_2-mean_price)/mean_price)
summary(join_data2$diff_rate)
sort(join_data2$diff_rate,decreasing = T)
summary(zirulian0$decoration)#忽略装修情况不可忽略
a = as.factor(zirulian0$decoration)
str(a)
zirulian0$decoration = as.factor(zirulian0$decoration)
summary(zirulian0$decoration)#忽略装修情况不可忽略
ziru0$decoration = as.factor(ziru0$decoration)
summary(ziru0$decoration)#忽略装修情况
summary(ziru0$decoration)#自如房源的装修情况：
View(ziru0)
summary(zirulian0[appid = 104,'decoration'])#
summary(zirulian0[zirulian0$appid =104,'decoration'])#
summary(zirulian0[zirulian0$appid ==104,'decoration'])#
summary(zirulian0[zirulian0$appid ==104,'decoration'])#链家房源的装修情况
#在原数据框中删除价格为空的值。
summary(zirulian0[zirulian0$appid ==104,'rent_type'])#链家房源的租赁情况
zirulian0$rent_type  = as.factor(zirulian0$rent_type)
#在原数据框中删除价格为空的值。
summary(zirulian0[zirulian0$appid ==104,'rent_type'])#链家房源的租赁情况
ziru0$rent_type = as.factor(ziru0$rent_type)
summary(ziru0$decoration)#自如房源的租赁类型情况：
summary(ziru0$rent_type)#自如房源的租赁类型情况：
sum(zirulian0$decoration=='0'|zirulian0$rent_type=='0')
#在链家18000的房源中，装修或者租赁方式不详的样本数目是：
sum(zirulian0$decoration=='0'|zirulian0$rent_type=='0')
a = (TRUE,FALSE)
a = (TRUE,FALSE)
a = (TRUE,FALSE)
!(zirulian0$decoration=='0'|zirulian0$rent_type=='0')
zirulian0 = zirulian0[!(zirulian0$decoration=='0'|zirulian0$rent_type=='0'),]
str(zirulian0)
str(ziru0)
#删掉数据集zirulian0中rent_type或者decoration取0的样本：
zirulian0 = zirulian0[!(zirulian0$decoration=='0'|zirulian0$rent_type=='0'),]
str(zirulian0)
which(zirulian0$decoration=='0')
#########################################################
zirulian0 = read.csv('628756.csv')
str(zirulian0)
#删掉数据集zirulian0中rent_type或者decoration取0的样本：
zirulian0 = zirulian0[!(zirulian0$decoration==0|zirulian0$rent_type==0),]
str(zirulian0)
#第一步修改数据类型
numeric_names2 = names(zirulian0)[grep('per_area',names(zirulian0))]
#numeric_names ：是需要把数据类型变成数值型的变量名字符向量。
zirulian0[,numeric_names] = apply(zirulian0[,numeric_names],2,as.numeric)
#正确设置因子型的变量：decoration,rent_type
zirulian0$decoration  = as.factor(zirulian0$decoration)
zirulian0$rent_type  = as.factor(zirulian0$rent_type)
summary(zirulian0[zirulian0$appid ==104,'decoration'])#链家房源的装修情况
#在原数据框中删除价格为空的值。
summary(zirulian0[zirulian0$appid ==104,'rent_type'])#链家房源的租赁情况
#在原数据框中删除价格为空的值。
complete_logical = complete.cases(zirulian0$price_trans_per_area,zirulian0$price_listing_per_area)
sum(complete_logical)
zirulian0 = zirulian0[complete_logical,]
sum(complete_logical)
names(zirulian0)
zirulian1 = group_by(zirulian0, hdic_bizcircle_id,hdic_resblock_id,rent_type)
n_groups(zirulian1)#8510?
table(group_size(zirulian1))
zirulian2 = zirulian0 %>%
group_by(hdic_bizcircle_id,hdic_resblock_id,rent_type) %>%
summarise(n_2 = n(),mean_price_2 = mean(price_trans_per_area))
View(zirulian2)
##按商圈来分类:
zirulian3 = zirulian0 %>%
group_by(hdic_bizcircle_id,rent_type) %>%
summarise(n_3 = n(),mean_price_3 = mean(price_trans_per_area))
table(zirulian3$n_3)
distinct(zirulian0,hdic_bizcircle_id)
table(zirulian3$n_3)
name(table(zirulian3$n_3))
names(table(zirulian3$n_3))
table(zirulian3$n_3)
sum(table(zirulian3$n_3))
##按商圈来分类:
zirulian3 = zirulian0 %>%
group_by(hdic_bizcircle_id,rent_type,decoration) %>%
summarise(n_3 = n(),mean_price_3 = mean(price_trans_per_area))
table(zirulian3$n_3)
sum(table(zirulian3$n_3))
View(zirulian3)
#按小区来分类：
zirulian2 = zirulian0 %>%
group_by(hdic_bizcircle_id,hdic_resblock_id,rent_type,decoration) %>%
summarise(n_2 = n(),mean_price_2 = mean(price_trans_per_area))
View(zirulian2)
#看一下单位面积租赁价的极值：
summary(zirulian0$price_trans)
#看一下单位面积租赁价的极值：
summary(zirulian0$price_trans_per_area)
datax <- array(1:8, dim=c(2,2,2))
datax
View(ziru2)
melt(ziru2)
install.packages("reshape2")
melt(ziru2)
library(reshape2)
melt(ziru2)
ziru2
melt(data = ziru2,id.vars = c(ziru2$hdic_resblock_id,ziru2$rent_type),variable.name = ziru2$mean_price)
melt(data = ziru2,id.vars = c('hdic_resblock_id','rent_type'),variable.name = 'mean_price')
View(ziru2)
#melt与cast的用法：
melt(data = ziru2,id.vars = c('hdic_resblock_id','rent_type'),measure.vars = 'mean_price',variable.name = '"V.type"')
names(ChickWeight) <- tolower(names(ChickWeight))
chick_m <- melt(ChickWeight, id=2:4, na.rm=TRUE)
chick_m
dcast(chick_m, time ~ variable, mean)
dcast(chick_m, diet + chick ~ time)
dcast(data = ziru2,formula = hdic_resblock_id~rent_type)
dcast(data = ziru2,formula = hdic_resblock_id~rent_type,value.var = 'rent_type')
dcast(data = ziru2,formula = hdic_resblock_id~rent_type)
#melt与cast的用法：
ziru2_rent_type_junjia = dcast(data = ziru2,formula = hdic_resblock_id~rent_type) #长表变宽表。
ziru2_rent_type_junjia
names(ziru2_rent_type_junjia)[2:3]=c('zheng_mean','he_mean')
names(ziru2_rent_type_junjia)
lm(formula = he_mean~zheng_mean,data =ziru2_rent_type_junjia,na.action = na.omit )
lm_1 = lm(formula = he_mean~zheng_mean,data =ziru2_rent_type_junjia,na.action = na.omit )
summary(lm_1)
lm_2 = lm(formula = sqrt(he_mean)~zheng_mean,data =ziru2_rent_type_junjia,na.action = na.omit )
summary(lm)_2
summary(lm_2)
lm_3 = lm(formula = sqrt(zheng_mean)~he_mean,data =ziru2_rent_type_junjia,na.action = na.omit )
summary(lm_3)
summary(lm_2)
#lm_3的R2是0.51.
indexNA = which(is.na(ziru2_rent_type_junjia$zheng_mean))
indexNA
predict(object = lm_3,newdata = ziru2_rent_type_junjia[indexNA,c(2,3)])
predict(object = lm_3,newdata = ziru2_rent_type_junjia[indexNA,c(2,3)])**2
predict_lm3 = predict(object = lm_3,newdata = ziru2_rent_type_junjia[indexNA,c(2,3)])**2
ziru2_rent_type_junjia[indexNA,'zheng_mean']=predict_lm3
ziru2_rent_type_junjia
indexNA2 = which(is.na(ziru2_rent_type_junjia$he_mean))
#建立回归模型：谁做因变量？对于自如的房源：合租的居多，所以将整租作为因变量来预测。
lm_1 = lm(formula = he_mean~zheng_mean,data =ziru2_rent_type_junjia,na.action = na.omit )
summary(lm_1)
predict_lm1 = predict(object = lm_1,newdata = ziru2_rent_type_junjia[indexNA2,c(2,3)])
hist(predict_lm1)
ziru2_rent_type_junjia[indexNA2,'he_mean']=predict_lm1
ziru2_rent_type_junjia
dim(ziru2_rent_type_junjia)
names(ziru0)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/lianjia/Desktop/junjia_model_lianjia")
ziru0 = read.csv('625703.csv')
dim(ziru0)# 17202    16
head(ziru0)
##要变成数值型的变量:numeric_names
numeric_names = names(ziru0)[grep('per_area',names(ziru0))]
attach(ziru0)
ziru0[,numeric_names] = apply(ziru0[,numeric_names],2,as.numeric)
##要变成因子型的变量：factor_names
factor_names = c('decoration','rent_type')
ziru0[,factor_names] = apply(ziru0[,factor_names],2,as.factor)
#在数据框ziru0中删除价格price_listing_per_area缺失或者price_trans_per_area缺失的观测。
complete_row = complete.cases(ziru0$price_trans_per_area,ziru0$price_listing_per_area)
ziru0 = ziru0[complete_logical,]
##查看自如房源的装修情况和租赁情况：
summary(ziru0$decoration)#自如房源的装修情况：
summary(ziru0$rent_type)#自如房源的租赁类型情况：
#按（商圈，小区，租赁方式）对数据框ziru0分组：得到ziru1_group
ziru1_group = group_by(ziru0, hdic_bizcircle_id,hdic_resblock_id,rent_type)
#依这样的分组方式可以分成多少组？
n_groups(ziru1_group)
#查看各个组包含样本数的统计表：
table(group_size(ziru1))
##要变成数值型的变量:numeric_names
numeric_names = names(ziru0)[grep('per_area',names(ziru0))]
attach(ziru0)
ziru0[,numeric_names] = apply(ziru0[,numeric_names],2,as.numeric)
##要变成因子型的变量：factor_names
factor_names = c('decoration','rent_type')
ziru0[,factor_names] = apply(ziru0[,factor_names],2,as.factor)
#在数据框ziru0中删除价格price_listing_per_area缺失或者price_trans_per_area缺失的观测。
complete_row = complete.cases(ziru0$price_trans_per_area,ziru0$price_listing_per_area)
ziru0 = ziru0[complete_logical,]
##查看自如房源的装修情况和租赁情况：
summary(ziru0$decoration)#自如房源的装修情况：
summary(ziru0$rent_type)#自如房源的租赁类型情况：
#按（商圈，小区，租赁方式）对数据框ziru0分组：得到ziru1_group
ziru1_group = group_by(ziru0, hdic_bizcircle_id,hdic_resblock_id,rent_type)
#依这样的分组方式可以分成多少组？
n_groups(ziru1_group)
#查看各个组包含样本数的统计表：
table(group_size(ziru1))
setwd("C:/Users/lianjia/Desktop/junjia_model_lianjia")
ziru0 = read.csv('625703.csv')
dim(ziru0)# 17202    16
head(ziru0)
##要变成数值型的变量:numeric_names
numeric_names = names(ziru0)[grep('per_area',names(ziru0))]
ziru0[,numeric_names] = apply(ziru0[,numeric_names],2,as.numeric)
##要变成因子型的变量：factor_names
factor_names = c('decoration','rent_type')
ziru0[,factor_names] = apply(ziru0[,factor_names],2,as.factor)
#在数据框ziru0中删除价格price_listing_per_area缺失或者price_trans_per_area缺失的观测。
complete_row = complete.cases(ziru0$price_trans_per_area,ziru0$price_listing_per_area)
ziru0 = ziru0[complete_logical,]
##查看自如房源的装修情况和租赁情况：
summary(ziru0$decoration)#自如房源的装修情况：
summary(ziru0$rent_type)#自如房源的租赁类型情况：
#按（商圈，小区，租赁方式）对数据框ziru0分组：得到ziru1_group
ziru1_group = group_by(ziru0, hdic_bizcircle_id,hdic_resblock_id,rent_type)
#依这样的分组方式可以分成多少组？
n_groups(ziru1_group)
#查看各个组包含样本数的统计表：
table(group_size(ziru1))
##查看自如房源的装修情况和租赁情况：
str(ziru0$decoration)
setwd("C:/Users/lianjia/Desktop/junjia_model_lianjia")
ziru0 = read.csv('625703.csv')
dim(ziru0)# 17202    16
head(ziru0)
##要变成数值型的变量:numeric_names
numeric_names = names(ziru0)[grep('per_area',names(ziru0))]
ziru0[,numeric_names] = apply(ziru0[,numeric_names],2,as.numeric)
##要变成因子型的变量：factor_names
ziru0$decoration = as.factor(ziru0$decoration)
ziru0$rent_type = as.factor(ziru0$rent_type)
#在数据框ziru0中删除价格price_listing_per_area缺失或者price_trans_per_area缺失的观测。
complete_row = complete.cases(ziru0$price_trans_per_area,ziru0$price_listing_per_area)
ziru0 = ziru0[complete_logical,]
##查看自如房源的装修情况和租赁情况：
str(ziru0$decoration)
summary(ziru0$decoration)#自如房源的装修情况：
summary(ziru0$rent_type)#自如房源的租赁类型情况：
#按（商圈，小区，租赁方式）对数据框ziru0分组：得到ziru1_group
ziru1_group = group_by(ziru0, hdic_bizcircle_id,hdic_resblock_id,rent_type)
#依这样的分组方式可以分成多少组？
n_groups(ziru1_group)
#查看各个组包含样本数的统计表：
table(group_size(ziru1))
dim(ziru0)# 17202    16
##要变成数值型的变量:numeric_names
numeric_names = names(ziru0)[grep('per_area',names(ziru0))]
ziru0[,numeric_names] = apply(ziru0[,numeric_names],2,as.numeric)
##要变成因子型的变量：factor_names
ziru0$decoration = as.factor(ziru0$decoration)
ziru0$rent_type = as.factor(ziru0$rent_type)
#在数据框ziru0中删除价格price_listing_per_area缺失或者price_trans_per_area缺失的观测。
complete_row = complete.cases(ziru0$price_trans_per_area,ziru0$price_listing_per_area)
ziru0 = ziru0[complete_row,]
setwd("C:/Users/lianjia/Desktop/junjia_model_lianjia")
ziru0 = read.csv('625703.csv')
dim(ziru0)# 17202    16
head(ziru0)
##要变成数值型的变量:numeric_names
numeric_names = names(ziru0)[grep('per_area',names(ziru0))]
ziru0[,numeric_names] = apply(ziru0[,numeric_names],2,as.numeric)
##要变成因子型的变量：factor_names
ziru0$decoration = as.factor(ziru0$decoration)
ziru0$rent_type = as.factor(ziru0$rent_type)
#在数据框ziru0中删除价格price_listing_per_area缺失或者price_trans_per_area缺失的观测。
complete_row = complete.cases(ziru0$price_trans_per_area,ziru0$price_listing_per_area)
ziru0 = ziru0[complete_row,]
##查看自如房源的装修情况和租赁情况：
str(ziru0$decoration)
summary(ziru0$decoration)#自如房源的装修情况：
summary(ziru0$rent_type)#自如房源的租赁类型情况：
#按（商圈，小区，租赁方式）对数据框ziru0分组：得到ziru1_group
ziru1_group = group_by(ziru0, hdic_bizcircle_id,hdic_resblock_id,rent_type)
#依这样的分组方式可以分成3937组。
n_groups(ziru1_group)
#查看各个组包含样本数的统计表：
table(group_size(ziru1))
ziru2 = ziru0 %>%
group_by(hdic_resblock_id,rent_type) %>%
summarise(n = n(),mean_price = mean(price_trans_per_area))
ziru2 = ziru0 %>%
group_by(hdic_resblock_id,rent_type) %>%
summarise(n = n(),mean_price = mean(price_trans_per_area))
head(ziru2)
ziru2 = ziru0 %>%
group_by(hdic_resblock_id,rent_type) %>%
summarise(n = n(),mean_price = mean(price_trans_per_area))
head(ziru2)
dim(ziru2)
#首要问题：谁做因变量？
#统计整租与合租的缺失值数目。
#对于自如的房源：合租的居多，所以将整租作为因变量来预测。
sum(is.na(ziru2_rent_type_junjia$zheng_mean))
sum(is.na(ziru2_rent_type_junjia$he_mean))
library(reshape2)
ziru2_rent_type_junjia = dcast(data = ziru2,formula = hdic_resblock_id~rent_type) #长表变宽表。
#修改一下新数据框的列名称，新数据框的3列：小区ID，整租的平均单价，合租的平均单价。
names(ziru2_rent_type_junjia)[2:3]=c('zheng_mean','he_mean')
#首要问题：谁做因变量？
#统计整租与合租的缺失值数目。
#对于自如的房源：合租的居多，所以将整租作为因变量来预测。
sum(is.na(ziru2_rent_type_junjia$zheng_mean))
sum(is.na(ziru2_rent_type_junjia$he_mean))
lm_3 = lm(formula = sqrt(zheng_mean)~he_mean,data =ziru2_rent_type_junjia,na.action = na.omit )
#建立二次函数模型。
summary(lm_3)
lm_3 = lm(formula = zheng_mean~he_mean,data =ziru2_rent_type_junjia,na.action = na.omit )
#建立二次函数模型。
summary(lm_3)
lm_3 = lm(formula = zheng_mean~sqrt(he_mean),data =ziru2_rent_type_junjia,na.action = na.omit )
#建立二次函数模型。
summary(lm_3)
#建立二次函数模型。
summary(lm_1)
lm_2 = lm(formula = zheng_mean~he_mean,data =ziru2_rent_type_junjia,na.action = na.omit )
summary(lm_2)
sum(is.na(ziru2_rent_type_junjia))
dim(ziru2_rent_type_junjia)[1]-complete.cases(ziru2_rent_type_junjia) #首次回归的样本量
dim(ziru2_rent_type_junjia)[1]-sum(complete.cases(ziru2_rent_type_junjia)) #首次回归的样本量
lm_3 = lm(formula = zheng_mean~sqrt(he_mean),data =ziru2_rent_type_junjia,na.action = na.omit )
summary(lm_3)
indexNA_zheng = which(is.na(ziru2_rent_type_junjia$zheng_mean))
indexNA_he = which(is.na(ziru2_rent_type_junjia$he_mean))
#对缺失的zheng_mean进行回归预测
predict_lm1 = predict(object = lm_1,newdata= ziru2_rent_type_junjia[indexNA_zheng,c(2,3)])
#对缺失的zheng_mean进行补缺。
ziru2_rent_type_junjia[indexNA,'zheng_mean']=predict_lm1**2
lm_4 = lm(formula = he_mean~sqrt(zheng_mean),data =ziru2_rent_type_junjia,na.action = na.omit )
summary(lm_4)
lm_5 = lm(formula = he_mean~zheng_mean,data =ziru2_rent_type_junjia,na.action = na.omit )
summary(lm_5)
lm_6 = lm(formula = sqrt(he_mean)~zheng_mean,data =ziru2_rent_type_junjia,na.action = na.omit )
summary(lm_6) #Multiple R-squared:  0.4939
predict_lm4 = predict(object = lm_1,newdata = ziru2_rent_type_junjia[indexNA_he,c(2,3)])
#找到缺失值的位置：
indexNA_zheng = which(is.na(ziru2_rent_type_junjia$zheng_mean))
indexNA_he = which(is.na(ziru2_rent_type_junjia$he_mean))
#对缺失的zheng_mean进行回归预测
predict_lm1 = predict(object = lm_1,newdata= ziru2_rent_type_junjia[indexNA_zheng,c(2,3)])
#对缺失的zheng_mean进行补缺。
ziru2_rent_type_junjia[indexNA,'zheng_mean']=predict_lm1**2
#zheng_mean完整之后，再he_mean进行补缺:由lm_1可知，两变量间是是两次函数关系
lm_4 = lm(formula = he_mean~sqrt(zheng_mean),data =ziru2_rent_type_junjia,na.action = na.omit )
summary(lm_4) #Multiple R-squared:  0.5041
#选用lm_4模型来对he_mean补缺。
predict_lm4 = predict(object = lm_1,newdata = ziru2_rent_type_junjia[indexNA_he,c(2,3)])
ziru2_rent_type_junjia[indexNA_he,'he_mean']=predict_lm4
ziru2_rent_type_junjia
sum(is.na(ziru2_rent_type_junjia))
#选用lm_4模型来对he_mean补缺。
predict_lm4 = predict(object = lm_1,newdata = ziru2_rent_type_junjia[indexNA_he,c(2,3)])
predict_lm4
#找到缺失值的位置：
indexNA_zheng = which(is.na(ziru2_rent_type_junjia$zheng_mean))
indexNA_he = which(is.na(ziru2_rent_type_junjia$he_mean))
#对缺失的zheng_mean进行回归预测
predict_lm1 = predict(object = lm_1,newdata= ziru2_rent_type_junjia[indexNA_zheng,c(2,3)])
#对缺失的zheng_mean进行补缺。
ziru2_rent_type_junjia[indexNA_zheng,'zheng_mean']=predict_lm1**2
#zheng_mean完整之后，再he_mean进行补缺:由lm_1可知，两变量间是是两次函数关系
lm_4 = lm(formula = he_mean~sqrt(zheng_mean),data =ziru2_rent_type_junjia,na.action = na.omit )
summary(lm_4) #Multiple R-squared:  0.5041
#选用lm_4模型来对he_mean补缺。
predict_lm4 = predict(object = lm_1,newdata = ziru2_rent_type_junjia[indexNA_he,c(2,3)])
ziru2_rent_type_junjia[indexNA_he,'he_mean']=predict_lm4
head(ziru2_rent_type_junjia)
#现在均值表中已经没有缺失的均价数据。
sum(is.na(ziru2_rent_type_junjia))
indexNA_zheng
#找到缺失值的位置：
indexNA_zheng = which(is.na(ziru2_rent_type_junjia$zheng_mean))
indexNA_he = which(is.na(ziru2_rent_type_junjia$he_mean))
#对缺失的zheng_mean进行回归预测
predict_lm1 = predict(object = lm_1,newdata= ziru2_rent_type_junjia[indexNA_zheng,c(2,3)])
#对缺失的zheng_mean进行补缺。
ziru2_rent_type_junjia[indexNA_zheng,'zheng_mean']=predict_lm1**2
#zheng_mean完整之后，再he_mean进行补缺:由lm_1可知，两变量间是是两次函数关系
lm_4 = lm(formula = he_mean~sqrt(zheng_mean),data =ziru2_rent_type_junjia,na.action = na.omit )
summary(lm_4) #Multiple R-squared:  0.5041
#选用lm_4模型来对he_mean补缺。
predict_lm4 = predict(object = lm_4,newdata = ziru2_rent_type_junjia[indexNA_he,c(2,3)])
ziru2_rent_type_junjia[indexNA_he,'he_mean']=predict_lm4
head(ziru2_rent_type_junjia)
#现在均值表中已经没有缺失的均价数据。
sum(is.na(ziru2_rent_type_junjia))
lm_3$residuals
lm_3$rank
lm_1$assign
lm_1$qr
lm_1$terms
lm_1$model
lm_1$call
summary(lm_2)
summary(lm_3)$r.squred
summary(lm_4)$R-squared #Multiple R-squared:  0.5041
str(summary(lm_4)) #Multiple R-squared:  0.5041
dim(ziru2_rent_type_junjia)
dim(ziru2)
